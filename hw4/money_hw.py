"""
class Money

–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ–Ω–µ–∂–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏.

–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å:
*   —Å–ª–æ–∂–µ–Ω–∏–µ
*   –≤—ã—á–∏—Ç–∞–Ω–∏–µ
*   —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
*   —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–±–æ–ª—å—à–µ, –º–µ–Ω—å—à–µ, —Ä–∞–≤–Ω–æ, –Ω–µ —Ä–∞–≤–Ω–æ)

==========================================================================================
from functools import total_ordering
–û–ø–∏—Å—ã–≤–∞–µ–º—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–ª—è –∫–ª–∞—Å—Å–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –æ–ø—Ä–µ–¥–µ–ª—ë–Ω __eq__(), –∞ —Ç–∞–∫–∂–µ –æ–¥–∏–Ω –∏–∑
__lt__(), __gt__(), __le__(), __ge__(), —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

    @total_ordering
    class Student:

        def __eq__(self, other):
            return self.last_name == other.last_name

        def __lt__(self, other):
            return self.last_name < other.last_name

=========================================================================================

–ü—Ä–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö, —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å—Å—è –∫ —Å—É–º–º–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–ø–µ–µ–∫.

–ü—Ä–∏–º–µ—Ä—ã:
# –°–æ–∑–¥–∞–µ–º —Å—É–º–º—É –∏–∑ 20 —Ä—É–±–ª–µ–π –∏ 120 –∫–æ–ø–µ–µ–∫
money1 = Money(20, 120)  # –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–≤–∞ –ª—é–±—ã—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞

# –í—ã–≤–æ–¥–∏–º —Å—É–º–º—É, —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª-–≤–∞ –∫–æ–ø–µ–µ–∫ <= 99 –∫–æ–ø
print(money1) # 21—Ä—É–± 20–∫–æ–ø


# –°–æ–∑–¥–∞–µ–º –¥–≤–µ –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—É–º–º—ã
money1 = Money(20, 60)
money2 = Money(10, 45)

# –°–∫–ª–∞–¥—ã–≤–∞–µ–º —Å—É–º–º—ã
money3 = money1 + money2
print(money3)  # 31—Ä—É–± 5–∫–æ–ø



–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: (https://pythonworld.ru/osnovy/peregruzka-operatorov.html).


#### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è **

–î–æ–±–∞–≤—å—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é - –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç —Å—É–º–º—ã. %

–ü—Ä–∏–º–µ—Ä:

# –°–æ–∑–¥–∞–µ–º –¥–≤–µ –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—É–º–º—ã
money1 = Money(20, 60)

# –ù–∞—Ö–æ–¥–∏–º 21% –æ—Ç —Å—É–º–º—ã
percent_sum = money1 % 21

print(percent_sum)  # 4—Ä—É–± 33–∫–æ–ø

__mod__()
–ü–æ—è—Å–Ω–µ–Ω–∏–µ: % (–ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—É–º–º—ã) - –¥–æ–ª–∂–Ω–∞ —è–≤–ª—è—Ç—å—Å—è –Ω–æ–≤–∞—è –¥–µ–Ω–µ–∂–Ω–∞—è —Å—É–º–º–∞.
–ü–æ—Å–ª–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ (—Ñ—É–Ω–∫—Ü–∏—è round())


### –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç

–î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∫–ª–∞—Å—Å Money, –¥–æ–±–∞–≤–∏–≤ –µ–º—É –º–µ—Ç–æ–¥ .convert(), –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö –≤ –µ–≤—Ä–æ –∏ –¥–æ–ª–ª–∞—Ä—ã(*–ª—é–±—É—é –≤–∞–ª—é—Ç—É).
–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–∂–Ω–æ –≤–∑—è—Ç—å, —Å–¥–µ–ª–∞–≤ –∑–∞–ø—Ä–æ—Å –Ω–∞: https://www.cbr-xml-daily.ru/daily_json.js

#### –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ url-–∞–¥—Ä–µ—Å

pip install requests
py -m pip install requests
import requests

url = 'https://www.cbr-xml-daily.ru/daily_json.js'
response = requests.get(url)

, –≥–¥–µ url - –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∑–∞–ø—Ä–æ—Å.

–í –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é response –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å–∞–π—Ç–∞.

–î–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏–∑ json-—Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:

import json
data_dict = json.loads(response.text)

–ú–æ–¥—É–ª—è json

print(data_dict['Valute']['EUR']['Value'])
"""

from __future__ import annotations
from functools import total_ordering
import requests


url = "https://www.cbr-xml-daily.ru/daily_json.js"
response = requests.get(url)
val_data = response.json()

@total_ordering
class Money():
    def __init__(self,rub, kop):
        self.rub = rub
        self.kop = kop

    def __str__(self):
        return f'{self.rub + self.kop // 100}.{self.kop %100}'

    def __add__(self, other):
        rub_sum = self.rub + other.rub + (self.kop + other.kop) // 100
        kop_sum = (self.kop + other.kop) % 100
        return Money(rub_sum, kop_sum)

    def __mul__(self, num):
        res = round(self.rub *100 + self.kop)*num
        return Money(res //100, res %100)

    def __mod__(self, numb):
        p = round(numb * (self.rub + self.kop) / 100)
        return Money(p // 100, p % 100)

    def __eq__(self, other: Money):
        return self.rub * 100 + self.kop == other.rub *100 + other.kop

    def __lt__(self, other):
        return self.rub * 100 + self.kop < other.rub * 100 + other.kop

    def convert(self,val_name):
        price = val_data['Valute'][val_name]['Value']
        nominal = val_data['Valute'][val_name]['Nominal']
        val_conv = nominal * (self.rub + self.kop/100)/price
        return round(val_conv,3)



# money_1 = Money(20, 45)
# print(money_1)


money_1 = Money(100,0)
money_2 = Money(15, 25)

print(f"money_1: {money_1}")
print(f"money_2: {money_2}")

money_3 = money_1 + money_2
print(f"money_3: {money_3}")

money_4 = money_3 % 10
print(f"money_4: {money_4}")

money_5 = money_1 * 3
print(f"money_5: {money_5}")

percent = money_1 % 20
print(percent)

print(money_1.convert("BYN"), "üêá")



# if(money_1 > money_4):
#     print(f"{money_1} > {money_4}")
# else:
#     print(False)
#
# if (money_2 == money_4):
#     print(f"{money_2} == {money_4}")
# else:
#     print(False)
print(money_1 > money_4)
print(money_2 == money_4)
print(money_1 < money_4)
print(money_1 >= money_4)
print(money_1 <= money_4)
